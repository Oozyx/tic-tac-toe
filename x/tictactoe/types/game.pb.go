// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tictactoe/tictactoe/game/game.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GameStatus int32

const (
	GameStatus_OPEN        GameStatus = 0
	GameStatus_IN_PROGRESS GameStatus = 1
	GameStatus_COMPLETE    GameStatus = 2
)

var GameStatus_name = map[int32]string{
	0: "OPEN",
	1: "IN_PROGRESS",
	2: "COMPLETE",
}

var GameStatus_value = map[string]int32{
	"OPEN":        0,
	"IN_PROGRESS": 1,
	"COMPLETE":    2,
}

func (x GameStatus) String() string {
	return proto.EnumName(GameStatus_name, int32(x))
}

func (GameStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_58bb5ad4113b04ac, []int{0}
}

type BoardEntry int32

const (
	BoardEntry_EMPTY BoardEntry = 0
	BoardEntry_X     BoardEntry = 1
	BoardEntry_O     BoardEntry = 2
)

var BoardEntry_name = map[int32]string{
	0: "EMPTY",
	1: "X",
	2: "O",
}

var BoardEntry_value = map[string]int32{
	"EMPTY": 0,
	"X":     1,
	"O":     2,
}

func (x BoardEntry) String() string {
	return proto.EnumName(BoardEntry_name, int32(x))
}

func (BoardEntry) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_58bb5ad4113b04ac, []int{1}
}

type Game struct {
	Id         uint32       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Status     GameStatus   `protobuf:"varint,2,opt,name=status,proto3,enum=tictactoe.tictactoe.game.GameStatus" json:"status,omitempty"`
	Challenger string       `protobuf:"bytes,3,opt,name=challenger,proto3" json:"challenger,omitempty"`
	Opponent   string       `protobuf:"bytes,4,opt,name=opponent,proto3" json:"opponent,omitempty"`
	PlayerX    string       `protobuf:"bytes,5,opt,name=playerX,proto3" json:"playerX,omitempty"`
	PlayerO    string       `protobuf:"bytes,6,opt,name=playerO,proto3" json:"playerO,omitempty"`
	Board      []BoardEntry `protobuf:"varint,7,rep,packed,name=board,proto3,enum=tictactoe.tictactoe.game.BoardEntry" json:"board,omitempty"`
}

func (m *Game) Reset()         { *m = Game{} }
func (m *Game) String() string { return proto.CompactTextString(m) }
func (*Game) ProtoMessage()    {}
func (*Game) Descriptor() ([]byte, []int) {
	return fileDescriptor_58bb5ad4113b04ac, []int{0}
}
func (m *Game) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Game) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Game.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Game) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Game.Merge(m, src)
}
func (m *Game) XXX_Size() int {
	return m.Size()
}
func (m *Game) XXX_DiscardUnknown() {
	xxx_messageInfo_Game.DiscardUnknown(m)
}

var xxx_messageInfo_Game proto.InternalMessageInfo

func (m *Game) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Game) GetStatus() GameStatus {
	if m != nil {
		return m.Status
	}
	return GameStatus_OPEN
}

func (m *Game) GetChallenger() string {
	if m != nil {
		return m.Challenger
	}
	return ""
}

func (m *Game) GetOpponent() string {
	if m != nil {
		return m.Opponent
	}
	return ""
}

func (m *Game) GetPlayerX() string {
	if m != nil {
		return m.PlayerX
	}
	return ""
}

func (m *Game) GetPlayerO() string {
	if m != nil {
		return m.PlayerO
	}
	return ""
}

func (m *Game) GetBoard() []BoardEntry {
	if m != nil {
		return m.Board
	}
	return nil
}

func init() {
	proto.RegisterEnum("tictactoe.tictactoe.game.GameStatus", GameStatus_name, GameStatus_value)
	proto.RegisterEnum("tictactoe.tictactoe.game.BoardEntry", BoardEntry_name, BoardEntry_value)
	proto.RegisterType((*Game)(nil), "tictactoe.tictactoe.game.Game")
}

func init() {
	proto.RegisterFile("tictactoe/tictactoe/game/game.proto", fileDescriptor_58bb5ad4113b04ac)
}

var fileDescriptor_58bb5ad4113b04ac = []byte{
	// 331 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0xcf, 0x4a, 0xc3, 0x40,
	0x10, 0xc6, 0xb3, 0x69, 0xd3, 0x3f, 0xa3, 0xd6, 0x30, 0xa7, 0x45, 0x70, 0x09, 0xfe, 0x81, 0x52,
	0x68, 0x04, 0x45, 0x04, 0xf1, 0x54, 0x09, 0x45, 0xb0, 0x4d, 0x48, 0x7b, 0xa8, 0x5e, 0x64, 0x9b,
	0x2e, 0x35, 0xd0, 0x66, 0x43, 0xba, 0x82, 0xbd, 0xf9, 0x08, 0x3e, 0x96, 0xc7, 0x1e, 0x3d, 0x4a,
	0xfb, 0x22, 0x92, 0x54, 0x9b, 0x5e, 0xf4, 0xb2, 0x3b, 0xb3, 0xbf, 0xf9, 0x3e, 0x76, 0xf8, 0xe0,
	0x58, 0x85, 0x81, 0xe2, 0x81, 0x92, 0xe2, 0x2c, 0xaf, 0xc6, 0x7c, 0xba, 0x3e, 0xec, 0x38, 0x91,
	0x4a, 0x22, 0xdd, 0x20, 0x3b, 0xaf, 0x52, 0x7e, 0xf4, 0xa6, 0x43, 0xb1, 0xcd, 0xa7, 0x02, 0x6b,
	0xa0, 0x87, 0x23, 0x4a, 0x2c, 0x52, 0xdf, 0xf3, 0xf5, 0x70, 0x84, 0x37, 0x50, 0x9a, 0x29, 0xae,
	0x5e, 0x66, 0x54, 0xb7, 0x48, 0xbd, 0x76, 0x7e, 0x62, 0xff, 0xe5, 0x61, 0xa7, 0xfa, 0x5e, 0x36,
	0xeb, 0xff, 0x68, 0x90, 0x01, 0x04, 0xcf, 0x7c, 0x32, 0x11, 0xd1, 0x58, 0x24, 0xb4, 0x60, 0x91,
	0x7a, 0xd5, 0xdf, 0x7a, 0xc1, 0x03, 0xa8, 0xc8, 0x38, 0x96, 0x91, 0x88, 0x14, 0x2d, 0x66, 0x74,
	0xd3, 0x23, 0x85, 0x72, 0x3c, 0xe1, 0x73, 0x91, 0x0c, 0xa8, 0x91, 0xa1, 0xdf, 0x36, 0x27, 0x2e,
	0x2d, 0x6d, 0x13, 0x17, 0xaf, 0xc1, 0x18, 0x4a, 0x9e, 0x8c, 0x68, 0xd9, 0x2a, 0xfc, 0xff, 0xd9,
	0x56, 0x3a, 0xe6, 0x44, 0x2a, 0x99, 0xfb, 0x6b, 0x49, 0xe3, 0x12, 0x20, 0xdf, 0x00, 0x2b, 0x50,
	0x74, 0x3d, 0xa7, 0x6b, 0x6a, 0xb8, 0x0f, 0x3b, 0x77, 0xdd, 0x27, 0xcf, 0x77, 0xdb, 0xbe, 0xd3,
	0xeb, 0x99, 0x04, 0x77, 0xa1, 0x72, 0xeb, 0x76, 0xbc, 0x7b, 0xa7, 0xef, 0x98, 0x7a, 0xe3, 0x14,
	0x20, 0xf7, 0xc2, 0x2a, 0x18, 0x4e, 0xc7, 0xeb, 0x3f, 0x98, 0x1a, 0x1a, 0x40, 0x06, 0x26, 0x49,
	0x2f, 0xd7, 0xd4, 0x5b, 0x57, 0x1f, 0x4b, 0x46, 0x16, 0x4b, 0x46, 0xbe, 0x96, 0x8c, 0xbc, 0xaf,
	0x98, 0xb6, 0x58, 0x31, 0xed, 0x73, 0xc5, 0xb4, 0xc7, 0x43, 0x15, 0x06, 0x4d, 0xc5, 0x83, 0x66,
	0x9a, 0xd8, 0xeb, 0x56, 0x7a, 0x6a, 0x1e, 0x8b, 0xd9, 0xb0, 0x94, 0x45, 0x77, 0xf1, 0x1d, 0x00,
	0x00, 0xff, 0xff, 0x84, 0xe2, 0x4f, 0x93, 0xe1, 0x01, 0x00, 0x00,
}

func (m *Game) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Game) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Game) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Board) > 0 {
		dAtA2 := make([]byte, len(m.Board)*10)
		var j1 int
		for _, num := range m.Board {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintGame(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.PlayerO) > 0 {
		i -= len(m.PlayerO)
		copy(dAtA[i:], m.PlayerO)
		i = encodeVarintGame(dAtA, i, uint64(len(m.PlayerO)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PlayerX) > 0 {
		i -= len(m.PlayerX)
		copy(dAtA[i:], m.PlayerX)
		i = encodeVarintGame(dAtA, i, uint64(len(m.PlayerX)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Opponent) > 0 {
		i -= len(m.Opponent)
		copy(dAtA[i:], m.Opponent)
		i = encodeVarintGame(dAtA, i, uint64(len(m.Opponent)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Challenger) > 0 {
		i -= len(m.Challenger)
		copy(dAtA[i:], m.Challenger)
		i = encodeVarintGame(dAtA, i, uint64(len(m.Challenger)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Status != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGame(dAtA []byte, offset int, v uint64) int {
	offset -= sovGame(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Game) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGame(uint64(m.Id))
	}
	if m.Status != 0 {
		n += 1 + sovGame(uint64(m.Status))
	}
	l = len(m.Challenger)
	if l > 0 {
		n += 1 + l + sovGame(uint64(l))
	}
	l = len(m.Opponent)
	if l > 0 {
		n += 1 + l + sovGame(uint64(l))
	}
	l = len(m.PlayerX)
	if l > 0 {
		n += 1 + l + sovGame(uint64(l))
	}
	l = len(m.PlayerO)
	if l > 0 {
		n += 1 + l + sovGame(uint64(l))
	}
	if len(m.Board) > 0 {
		l = 0
		for _, e := range m.Board {
			l += sovGame(uint64(e))
		}
		n += 1 + sovGame(uint64(l)) + l
	}
	return n
}

func sovGame(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGame(x uint64) (n int) {
	return sovGame(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Game) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Game: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Game: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= GameStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Challenger", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Challenger = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Opponent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Opponent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerX", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerX = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerO", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerO = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType == 0 {
				var v BoardEntry
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= BoardEntry(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Board = append(m.Board, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGame
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthGame
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Board) == 0 {
					m.Board = make([]BoardEntry, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v BoardEntry
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGame
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= BoardEntry(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Board = append(m.Board, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Board", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGame(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGame
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGame
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGame
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGame
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGame
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGame
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGame        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGame          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGame = fmt.Errorf("proto: unexpected end of group")
)
